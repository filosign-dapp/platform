name: Build & Pack the SDK

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-pack:
    runs-on: ubuntu-latest
    env:
      PACKAGE_DIR: packages/lib
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get current package version
        id: read_version
        run: |
          echo "version=$(jq -r .version $PACKAGE_DIR/package.json)" >> $GITHUB_OUTPUT
          echo "name=$(jq -r .name $PACKAGE_DIR/package.json)" >> $GITHUB_OUTPUT

      - name: Get latest tag for this package
        id: get_latest_tag
        run: |
          # find the latest tag matching v*.*.* (semantic) or empty
          latest_tag=$(git tag --list "v*" --sort=-v:refname | head -n 1 || true)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          # If the latest tag exists, get its version number without 'v'
          if [ -n "$latest_tag" ]; then
            echo "latest_version=${latest_tag#v}" >> $GITHUB_OUTPUT
          else
            echo "latest_version=" >> $GITHUB_OUTPUT
          fi

      - name: Did package.json change in this push?
        id: changed
        run: |
          # check if package.json in package dir changed in this push
          git fetch origin main --depth=1 || true
          # check files changed in the latest commit(s) in this push
          changed_files=$(git diff --name-only HEAD~1..HEAD || git diff --name-only HEAD^..HEAD || true)
          echo "changed_files=$changed_files"
          if echo "$changed_files" | grep -q "^$PACKAGE_DIR/package.json$"; then
            echo "package_json_changed=true" >> $GITHUB_OUTPUT
          else
            echo "package_json_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: continue only if version changed
        id: decide
        run: |
          new_ver="${{ steps.read_version.outputs.version }}"
          latest_ver="${{ steps.get_latest_tag.outputs.latest_version }}"
          pkg_changed="${{ steps.changed.outputs.package_json_changed }}"
          echo "new_ver=$new_ver, latest_ver=$latest_ver, package_json_changed=$pkg_changed"
          # If package.json changed in this push, proceed.
          # Or if latest tag doesn't match version, proceed.
          if [ "$pkg_changed" = "true" ] || [ -z "$latest_ver" ] || [ "$new_ver" != "$latest_ver" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if no release needed
        if: ${{ steps.decide.outputs.should_release != 'true' }}
        run: |
          echo "No version change detected for $PACKAGE_DIR. Skipping release."
          exit 0

      - name: Build package
        run: |
          cd $PACKAGE_DIR
          bun i
          bun run build

      - name: npm pack (create tarball)
        run: |
          cd $PACKAGE_DIR
          npm pack
          # move artifact to workspace root so release action can find it easily
          mkdir -p $GITHUB_WORKSPACE/artifacts
          mv *.tgz $GITHUB_WORKSPACE/artifacts/

      - name: Create tag and push
        env:
          TAG: v${{ steps.read_version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          TAG=${TAG}
          # create annotated tag if it doesn't exist
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release and upload artifact
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Done
        run: echo "Release workflow finished."
